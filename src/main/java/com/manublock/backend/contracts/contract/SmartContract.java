package com.manublock.backend.contracts.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class SmartContract extends Contract {
    public static final String BINARY = "60806040526001600555348015610014575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613c10806100615f395ff3fe608060405234801561000f575f80fd5b5060043610610114575f3560e01c8063b7ed6e5b116100a0578063e7dbbb111161006f578063e7dbbb1114610340578063f23d572b1461035c578063f851a44014610378578063fd82ea2e14610396578063fe784269146103b257610114565b8063b7ed6e5b146102a2578063bfa2d8ab146102be578063bfb231d2146102ee578063ddf83e591461032457610114565b80636b958608116100e75780636b958608146101cd57806373004ca0146101e957806375829def1461021f5780639ace38c21461023b578063a2cfb4f31461027257610114565b80630fa683d3146101185780631f9e22c41461014f57806333bff3dd146101815780636b531974146101b1575b5f80fd5b610132600480360381019061012d919061236f565b6103e2565b604051610146989796959493929190612433565b60405180910390f35b6101696004803603810190610164919061236f565b6104cb565b604051610178939291906124d0565b60405180910390f35b61019b6004803603810190610196919061236f565b6104fd565b6040516101a891906125bc565b60405180910390f35b6101cb60048036038101906101c691906125dc565b610567565b005b6101e760048036038101906101e2919061263d565b61066b565b005b61020360048036038101906101fe919061236f565b61087b565b6040516102169796959493929190612700565b60405180910390f35b610239600480360381019061023491906127ce565b610974565b005b6102556004803603810190610250919061236f565b610b30565b604051610269989796959493929190612433565b60405180910390f35b61028c6004803603810190610287919061236f565b610bfa565b60405161029991906125bc565b60405180910390f35b6102bc60048036038101906102b7919061285a565b610c61565b005b6102d860048036038101906102d391906125dc565b6113b2565b6040516102e591906128f0565b60405180910390f35b6103086004803603810190610303919061236f565b6113eb565b60405161031b9796959493929190612700565b60405180910390f35b61033e6004803603810190610339919061285a565b6114c7565b005b61035a600480360381019061035591906125dc565b61183c565b005b610376600480360381019061037191906125dc565b611a03565b005b610380611ba2565b60405161038d9190612918565b60405180910390f35b6103b060048036038101906103ab9190612986565b611bc5565b005b6103cc60048036038101906103c791906125dc565b6122a3565b6040516103d99190612a6f565b60405180910390f35b5f805f805f805f60605f60035f8b81526020019081526020015f209050805f01548160010154826002015483600301548460040154856005015486600601548760070180805461043190612ab5565b80601f016020809104026020016040519081016040528092919081815260200182805461045d90612ab5565b80156104a85780601f1061047f576101008083540402835291602001916104a8565b820191905f5260205f20905b81548152906001019060200180831161048b57829003601f168201915b505050505090509850985098509850985098509850985050919395975091939597565b6004602052805f5260405f205f91509050805f015490806001015490806002015f9054906101000a900460ff16905083565b606060015f8381526020019081526020015f2060030180548060200260200160405190810160405280929190818152602001828054801561055b57602002820191905f5260205f20905b815481526020019060010190808311610547575b50505050509050919050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90612b2f565b60405180910390fd5b600160045f8481526020019081526020015f206003015f8381526020019081526020015f205f6101000a81548160ff021916908315150217905550817f989ed3281b03a58c95bf6f18aff2d5e839cf0fac606b90424d11199cf747b16e8260405161065f9190612a6f565b60405180910390a25050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90612b2f565b60405180910390fd5b8260015f8581526020019081526020015f205f01541461074d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074490612b97565b60405180910390fd5b60015f8481526020019081526020015f206007015f9054906101000a900460ff166107ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a490612bff565b60405180910390fd5b8060015f8581526020019081526020015f206001015414610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa90612c67565b60405180910390fd5b8160015f8581526020019081526020015f206005015f6101000a81548160ff021916908360048111156108395761083861268d565b5b0217905550827f104e19781f7b95c2c1bac73c7dcf206298d9ecb3d6712118520342a510dc91198360405161086e9190612c85565b60405180910390a2505050565b5f805f805f60605f8060015f8a81526020019081526020015f209050805f0154816001015482600201548360040154846005015f9054906101000a900460ff1685600601866007015f9054906101000a900460ff168180546108dc90612ab5565b80601f016020809104026020016040519081016040528092919081815260200182805461090890612ab5565b80156109535780601f1061092a57610100808354040283529160200191610953565b820191905f5260205f20905b81548152906001019060200180831161093657829003601f168201915b50505050509150975097509750975097509750975050919395979092949650565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f890612b2f565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6690612d0e565b60405180910390fd5b5f805f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167ff8ccb027dfcd135e000e9d45e6cc2d662578a8825d4c45b5e32e0adf67e79ec660405160405180910390a35050565b6003602052805f5260405f205f91509050805f015490806001015490806002015490806003015490806004015490806005015490806006015490806007018054610b7990612ab5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba590612ab5565b8015610bf05780601f10610bc757610100808354040283529160200191610bf0565b820191905f5260205f20905b815481529060010190602001808311610bd357829003601f168201915b5050505050905088565b606060025f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610c5557602002820191905f5260205f20905b815481526020019060010190808311610c41575b50505050509050919050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce590612b2f565b60405180910390fd5b8560015f8881526020019081526020015f205f015414610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90612b97565b60405180910390fd5b60015f8781526020019081526020015f206007015f9054906101000a900460ff16610da3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9a90612bff565b60405180910390fd5b8060015f8881526020019081526020015f206001015414610df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df090612c67565b60405180910390fd5b8360015f8881526020019081526020015f20600201541015610e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4790612d76565b60405180910390fd5b5f8411610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8990612dde565b60405180910390fd5b5f60055f815480929190610ea590612e29565b91905055905060405180610100016040528082815260200188815260200183815260200187815260200160015f8a81526020019081526020015f2060040154815260200186815260200142815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060035f8381526020019081526020015f205f820151815f01556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019081610fa6919061303a565b509050508460015f8981526020019081526020015f20600201541115611316578460015f8981526020019081526020015f206002015f828254610fe99190613109565b925050819055505f8161271089611000919061313c565b61100a919061317d565b90505f60015f8a81526020019081526020015f206003018054905067ffffffffffffffff81111561103e5761103d612e70565b5b60405190808252806020026020018201604052801561106c5781602001602082028036833780820191505090505b5090505f5b60015f8b81526020019081526020015f20600301805490508110156110f15760015f8b81526020019081526020015f2060030181815481106110b6576110b56131b0565b5b905f5260205f2001548282815181106110d2576110d16131b0565b5b60200260200101818152505080806110e990612e29565b915050611071565b508160015f8481526020019081526020015f205f01819055508760015f8481526020019081526020015f20600101819055508660015f8481526020019081526020015f206002018190555060015f8a81526020019081526020015f206004015460015f8481526020019081526020015f20600401819055506001805f8481526020019081526020015f206005015f6101000a81548160ff0219169083600481111561119f5761119e61268d565b5b021790555060015f8a81526020019081526020015f2060060160015f8481526020019081526020015f2060060190816111d89190613204565b506001805f8481526020019081526020015f206007015f6101000a81548160ff0219169083151502179055505f5b81518110156112745760015f8481526020019081526020015f20600301828281518110611236576112356131b0565b5b6020026020010151908060018154018082558091505060019003905f5260205f20015f9091909190915055808061126c90612e29565b915050611206565b5060025f8a81526020019081526020015f2082908060018154018082558091505060019003905f5260205f20015f9091909190915055817f5dedfefe0d027c33a6285520eaa3b938f1870f755ee1455ec648633aa36e2ac9898960015f8e81526020019081526020015f2060060160015f8f81526020019081526020015f2060040154604051611307949392919061336a565b60405180910390a2505061136b565b8560015f8981526020019081526020015f20600101819055506001805f8981526020019081526020015f206005015f6101000a81548160ff021916908360048111156113655761136461268d565b5b02179055505b867fe9b22adde1ca58a6717e52b9277741503344959716b7a76ece35bd02b32a3a98838888856040516113a194939291906133b4565b60405180910390a250505050505050565b5f60045f8481526020019081526020015f206003015f8381526020019081526020015f205f9054906101000a900460ff16905092915050565b6001602052805f5260405f205f91509050805f015490806001015490806002015490806004015490806005015f9054906101000a900460ff169080600601805461143490612ab5565b80601f016020809104026020016040519081016040528092919081815260200182805461146090612ab5565b80156114ab5780601f10611482576101008083540402835291602001916114ab565b820191905f5260205f20905b81548152906001019060200180831161148e57829003601f168201915b505050505090806007015f9054906101000a900460ff16905087565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154b90612b2f565b60405180910390fd5b5f60015f8881526020019081526020015f205f0154146115a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115a090613441565b60405180910390fd5b5f84116115eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e290612dde565b60405180910390fd5b60045f8681526020019081526020015f206003015f8281526020019081526020015f205f9054906101000a900460ff1661165a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611651906134cf565b60405180910390fd5b5f8067ffffffffffffffff81111561167557611674612e70565b5b6040519080825280602002602001820160405280156116a35781602001602082028036833780820191505090505b5090506040518061010001604052808881526020018381526020018681526020018281526020018781526020015f60048111156116e3576116e261268d565b5b815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020016001151581525060015f8981526020019081526020015f205f820151815f0155602082015181600101556040820151816002015560608201518160030190805190602001906117819291906122ce565b506080820151816004015560a0820151816005015f6101000a81548160ff021916908360048111156117b6576117b561268d565b5b021790555060c08201518160060190816117d0919061303a565b5060e0820151816007015f6101000a81548160ff021916908315150217905550905050867f5dedfefe0d027c33a6285520eaa3b938f1870f755ee1455ec648633aa36e2ac9838787878b60405161182b959493929190613527565b60405180910390a250505050505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146118c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c090612b2f565b60405180910390fd5b8160015f8481526020019081526020015f205f01541461191e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191590612b97565b60405180910390fd5b60015f8381526020019081526020015f206007015f9054906101000a900460ff1661197e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197590612bff565b60405180910390fd5b8060015f8481526020019081526020015f2060010154146119d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cb906135bd565b60405180910390fd5b5f60015f8481526020019081526020015f206007015f6101000a81548160ff0219169083151502179055505050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611a90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8790612b2f565b60405180910390fd5b5f60045f8481526020019081526020015f206001015414611ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611add90613625565b60405180910390fd5b8060045f8481526020019081526020015f2060010181905550600160045f8481526020019081526020015f206002015f6101000a81548160ff021916908315150217905550600160045f8481526020019081526020015f206003015f8381526020019081526020015f205f6101000a81548160ff021916908315150217905550817fe15d9489570e316e7fec6181ccb3d5745de7df4e3cab018910749d943d15592682604051611b969190612a6f565b60405180910390a25050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4990612b2f565b60405180910390fd5b5f8989905011611c97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8e9061368d565b60405180910390fd5b858590508989905014611cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd6906136f5565b60405180910390fd5b5f60015f8981526020019081526020015f205f015414611d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2b9061375d565b60405180910390fd5b5f8411611d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6d906137c5565b60405180910390fd5b5f8060055f815480929190611d8a90612e29565b9190505590505f5b8b8b90508110156120b8575f8c8c83818110611db157611db06131b0565b5b9050602002013590505f8a8a84818110611dce57611dcd6131b0565b5b9050602002013590508160015f8481526020019081526020015f205f015414611e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e239061382d565b60405180910390fd5b60015f8381526020019081526020015f206007015f9054906101000a900460ff16611e8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8390613895565b60405180910390fd5b8560015f8481526020019081526020015f206001015414611ee2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed990613923565b60405180910390fd5b8060015f8481526020019081526020015f20600201541015611f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f30906139b1565b60405180910390fd5b5f8303611f5c5760015f8381526020019081526020015f20600401549450611fb3565b8460015f8481526020019081526020015f206004015414611fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa990613a3f565b60405180910390fd5b5b8060015f8481526020019081526020015f206002015f828254611fd69190613109565b925050819055505f60015f8481526020019081526020015f20600201540361206e57600360015f8481526020019081526020015f206005015f6101000a81548160ff0219169083600481111561202f5761202e61268d565b5b0217905550817f104e19781f7b95c2c1bac73c7dcf206298d9ecb3d6712118520342a510dc911960036040516120659190612c85565b60405180910390a25b60025f8381526020019081526020015f208c908060018154018082558091505060019003905f5260205f20015f9091909190915055505080806120b090612e29565b915050611d92565b508860015f8b81526020019081526020015f205f01819055508260015f8b81526020019081526020015f20600101819055508560015f8b81526020019081526020015f20600201819055508160015f8b81526020019081526020015f20600401819055505f60015f8b81526020019081526020015f206005015f6101000a81548160ff021916908360048111156121525761215161268d565b5b0217905550848460015f8c81526020019081526020015f20600601918261217a929190613a67565b506001805f8b81526020019081526020015f206007015f6101000a81548160ff0219169083151502179055505f5b8b8b90508110156122175760015f8b81526020019081526020015f206003018c8c838181106121da576121d96131b0565b5b90506020020135908060018154018082558091505060019003905f5260205f20015f9091909190915055808061220f90612e29565b9150506121a8565b50887fb12cc92dccd18b0994ac45a6d8e4e737758a26158c3289caf24abfea5a3bdecb8c8c868560405161224e9493929190613b9c565b60405180910390a2887f5dedfefe0d027c33a6285520eaa3b938f1870f755ee1455ec648633aa36e2ac9848888888760405161228e959493929190613527565b60405180910390a25050505050505050505050565b6002602052815f5260405f2081815481106122bc575f80fd5b905f5260205f20015f91509150505481565b828054828255905f5260205f20908101928215612308579160200282015b828111156123075782518255916020019190600101906122ec565b5b5090506123159190612319565b5090565b5b80821115612330575f815f90555060010161231a565b5090565b5f80fd5b5f80fd5b5f819050919050565b61234e8161233c565b8114612358575f80fd5b50565b5f8135905061236981612345565b92915050565b5f6020828403121561238457612383612334565b5b5f6123918482850161235b565b91505092915050565b6123a38161233c565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b838110156123e05780820151818401526020810190506123c5565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612405826123a9565b61240f81856123b3565b935061241f8185602086016123c3565b612428816123eb565b840191505092915050565b5f610100820190506124475f83018b61239a565b612454602083018a61239a565b612461604083018961239a565b61246e606083018861239a565b61247b608083018761239a565b61248860a083018661239a565b61249560c083018561239a565b81810360e08301526124a781846123fb565b90509998505050505050505050565b5f8115159050919050565b6124ca816124b6565b82525050565b5f6060820190506124e35f83018661239a565b6124f0602083018561239a565b6124fd60408301846124c1565b949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6125378161233c565b82525050565b5f612548838361252e565b60208301905092915050565b5f602082019050919050565b5f61256a82612505565b612574818561250f565b935061257f8361251f565b805f5b838110156125af578151612596888261253d565b97506125a183612554565b925050600181019050612582565b5085935050505092915050565b5f6020820190508181035f8301526125d48184612560565b905092915050565b5f80604083850312156125f2576125f1612334565b5b5f6125ff8582860161235b565b92505060206126108582860161235b565b9150509250929050565b60058110612626575f80fd5b50565b5f813590506126378161261a565b92915050565b5f805f6060848603121561265457612653612334565b5b5f6126618682870161235b565b935050602061267286828701612629565b92505060406126838682870161235b565b9150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b600581106126cb576126ca61268d565b5b50565b5f8190506126db826126ba565b919050565b5f6126ea826126ce565b9050919050565b6126fa816126e0565b82525050565b5f60e0820190506127135f83018a61239a565b612720602083018961239a565b61272d604083018861239a565b61273a606083018761239a565b61274760808301866126f1565b81810360a083015261275981856123fb565b905061276860c08301846124c1565b98975050505050505050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61279d82612774565b9050919050565b6127ad81612793565b81146127b7575f80fd5b50565b5f813590506127c8816127a4565b92915050565b5f602082840312156127e3576127e2612334565b5b5f6127f0848285016127ba565b91505092915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261281a576128196127f9565b5b8235905067ffffffffffffffff811115612837576128366127fd565b5b60208301915083600182028301111561285357612852612801565b5b9250929050565b5f805f805f8060a0878903121561287457612873612334565b5b5f61288189828a0161235b565b965050602061289289828a0161235b565b95505060406128a389828a0161235b565b945050606087013567ffffffffffffffff8111156128c4576128c3612338565b5b6128d089828a01612805565b935093505060806128e389828a0161235b565b9150509295509295509295565b5f6020820190506129035f8301846124c1565b92915050565b61291281612793565b82525050565b5f60208201905061292b5f830184612909565b92915050565b5f8083601f840112612946576129456127f9565b5b8235905067ffffffffffffffff811115612963576129626127fd565b5b60208301915083602082028301111561297f5761297e612801565b5b9250929050565b5f805f805f805f805f60c08a8c0312156129a3576129a2612334565b5b5f8a013567ffffffffffffffff8111156129c0576129bf612338565b5b6129cc8c828d01612931565b995099505060206129df8c828d0161235b565b97505060408a013567ffffffffffffffff811115612a00576129ff612338565b5b612a0c8c828d01612931565b96509650506060612a1f8c828d0161235b565b94505060808a013567ffffffffffffffff811115612a4057612a3f612338565b5b612a4c8c828d01612805565b935093505060a0612a5f8c828d0161235b565b9150509295985092959850929598565b5f602082019050612a825f83018461239a565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612acc57607f821691505b602082108103612adf57612ade612a88565b5b50919050565b7f4f6e6c792061646d696e2063616e2065786563757465207468697300000000005f82015250565b5f612b19601b836123b3565b9150612b2482612ae5565b602082019050919050565b5f6020820190508181035f830152612b4681612b0d565b9050919050565b7f4974656d20646f6573206e6f74206578697374000000000000000000000000005f82015250565b5f612b816013836123b3565b9150612b8c82612b4d565b602082019050919050565b5f6020820190508181035f830152612bae81612b75565b9050919050565b7f4974656d206973206e6f742061637469766500000000000000000000000000005f82015250565b5f612be96012836123b3565b9150612bf482612bb5565b602082019050919050565b5f6020820190508181035f830152612c1681612bdd565b9050919050565b7f4e6f7420746865206974656d206f776e657200000000000000000000000000005f82015250565b5f612c516012836123b3565b9150612c5c82612c1d565b602082019050919050565b5f6020820190508181035f830152612c7e81612c45565b9050919050565b5f602082019050612c985f8301846126f1565b92915050565b7f4e65772061646d696e2063616e6e6f7420626520746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f612cf86024836123b3565b9150612d0382612c9e565b604082019050919050565b5f6020820190508181035f830152612d2581612cec565b9050919050565b7f496e73756666696369656e74207175616e7469747900000000000000000000005f82015250565b5f612d606015836123b3565b9150612d6b82612d2c565b602082019050919050565b5f6020820190508181035f830152612d8d81612d54565b9050919050565b7f5175616e74697479206d75737420626520706f736974697665000000000000005f82015250565b5f612dc86019836123b3565b9150612dd382612d94565b602082019050919050565b5f6020820190508181035f830152612df581612dbc565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f612e338261233c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e6557612e64612dfc565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612ef97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612ebe565b612f038683612ebe565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612f3e612f39612f348461233c565b612f1b565b61233c565b9050919050565b5f819050919050565b612f5783612f24565b612f6b612f6382612f45565b848454612eca565b825550505050565b5f90565b612f7f612f73565b612f8a818484612f4e565b505050565b5b81811015612fad57612fa25f82612f77565b600181019050612f90565b5050565b601f821115612ff257612fc381612e9d565b612fcc84612eaf565b81016020851015612fdb578190505b612fef612fe785612eaf565b830182612f8f565b50505b505050565b5f82821c905092915050565b5f6130125f1984600802612ff7565b1980831691505092915050565b5f61302a8383613003565b9150826002028217905092915050565b613043826123a9565b67ffffffffffffffff81111561305c5761305b612e70565b5b6130668254612ab5565b613071828285612fb1565b5f60209050601f8311600181146130a2575f8415613090578287015190505b61309a858261301f565b865550613101565b601f1984166130b086612e9d565b5f5b828110156130d7578489015182556001820191506020850194506020810190506130b2565b868310156130f457848901516130f0601f891682613003565b8355505b6001600288020188555050505b505050505050565b5f6131138261233c565b915061311e8361233c565b925082820390508181111561313657613135612dfc565b5b92915050565b5f6131468261233c565b91506131518361233c565b925082820261315f8161233c565b9150828204841483151761317657613175612dfc565b5b5092915050565b5f6131878261233c565b91506131928361233c565b92508282019050808211156131aa576131a9612dfc565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f815490506131eb81612ab5565b9050919050565b5f819050815f5260205f209050919050565b8181036132125750506132e7565b61321b826131dd565b67ffffffffffffffff81111561323457613233612e70565b5b61323e8254612ab5565b613249828285612fb1565b5f601f831160018114613276575f8415613264578287015490505b61326e858261301f565b8655506132e0565b601f198416613284876131f2565b965061328f86612e9d565b5f5b828110156132b657848901548255600182019150600185019450602081019050613291565b868310156132d357848901546132cf601f891682613003565b8355505b6001600288020188555050505b5050505050505b565b5f81546132f581612ab5565b6132ff81866123b3565b9450600182165f8114613319576001811461332f57613361565b60ff198316865281151560200286019350613361565b61333885612e9d565b5f5b838110156133595781548189015260018201915060208101905061333a565b808801955050505b50505092915050565b5f60808201905061337d5f83018761239a565b61338a602083018661239a565b818103604083015261339c81856132e9565b90506133ab606083018461239a565b95945050505050565b5f6080820190506133c75f83018761239a565b6133d4602083018661239a565b6133e1604083018561239a565b6133ee606083018461239a565b95945050505050565b7f4974656d20494420616c726561647920657869737473000000000000000000005f82015250565b5f61342b6016836123b3565b9150613436826133f7565b602082019050919050565b5f6020820190508181035f8301526134588161341f565b9050919050565b7f43726561746f72206e6f7420617574686f72697a656420666f722074686973205f8201527f737570706c7920636861696e0000000000000000000000000000000000000000602082015250565b5f6134b9602c836123b3565b91506134c48261345f565b604082019050919050565b5f6020820190508181035f8301526134e6816134ad565b9050919050565b828183375f83830152505050565b5f61350683856123b3565b93506135138385846134ed565b61351c836123eb565b840190509392505050565b5f60808201905061353a5f83018861239a565b613547602083018761239a565b818103604083015261355a8185876134fb565b9050613569606083018461239a565b9695505050505050565b7f4e6f7420617574686f72697a65640000000000000000000000000000000000005f82015250565b5f6135a7600e836123b3565b91506135b282613573565b602082019050919050565b5f6020820190508181035f8301526135d48161359b565b9050919050565b7f537570706c7920636861696e20616c72656164792065786973747300000000005f82015250565b5f61360f601b836123b3565b915061361a826135db565b602082019050919050565b5f6020820190508181035f83015261363c81613603565b9050919050565b7f4d757374206861766520736f75726365206974656d73000000000000000000005f82015250565b5f6136776016836123b3565b915061368282613643565b602082019050919050565b5f6020820190508181035f8301526136a48161366b565b9050919050565b7f496e70757420617272617973206d757374206d617463680000000000000000005f82015250565b5f6136df6017836123b3565b91506136ea826136ab565b602082019050919050565b5f6020820190508181035f83015261370c816136d3565b9050919050565b7f4e6577206974656d20494420616c7265616479206578697374730000000000005f82015250565b5f613747601a836123b3565b915061375282613713565b602082019050919050565b5f6020820190508181035f8301526137748161373b565b9050919050565b7f4f7574707574207175616e74697479206d75737420626520706f7369746976655f82015250565b5f6137af6020836123b3565b91506137ba8261377b565b602082019050919050565b5f6020820190508181035f8301526137dc816137a3565b9050919050565b7f536f75726365206974656d20646f6573206e6f742065786973740000000000005f82015250565b5f613817601a836123b3565b9150613822826137e3565b602082019050919050565b5f6020820190508181035f8301526138448161380b565b9050919050565b7f536f75726365206974656d206973206e6f7420616374697665000000000000005f82015250565b5f61387f6019836123b3565b915061388a8261384b565b602082019050919050565b5f6020820190508181035f8301526138ac81613873565b9050919050565b7f4e6f7420746865206f776e6572206f6620616c6c20736f75726365206974656d5f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f61390d6021836123b3565b9150613918826138b3565b604082019050919050565b5f6020820190508181035f83015261393a81613901565b9050919050565b7f496e73756666696369656e74207175616e7469747920696e20736f75726365205f8201527f6974656d00000000000000000000000000000000000000000000000000000000602082015250565b5f61399b6024836123b3565b91506139a682613941565b604082019050919050565b5f6020820190508181035f8301526139c88161398f565b9050919050565b7f416c6c206974656d73206d75737420626520696e2073616d6520737570706c795f8201527f20636861696e0000000000000000000000000000000000000000000000000000602082015250565b5f613a296026836123b3565b9150613a34826139cf565b604082019050919050565b5f6020820190508181035f830152613a5681613a1d565b9050919050565b5f82905092915050565b613a718383613a5d565b67ffffffffffffffff811115613a8a57613a89612e70565b5b613a948254612ab5565b613a9f828285612fb1565b5f601f831160018114613acc575f8415613aba578287013590505b613ac4858261301f565b865550613b2b565b601f198416613ada86612e9d565b5f5b82811015613b0157848901358255600182019150602085019450602081019050613adc565b86831015613b1e5784890135613b1a601f891682613003565b8355505b6001600288020188555050505b50505050505050565b5f80fd5b82818337505050565b5f613b4c838561250f565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613b7f57613b7e613b34565b5b602083029250613b90838584613b38565b82840190509392505050565b5f6060820190508181035f830152613bb5818688613b41565b9050613bc4602083018561239a565b613bd1604083018461239a565b9594505050505056fea264697066735822122066aa29a42cf92a15aeabd1ab8fe8c014f44edce00275ef2e73923fbd4e3d558864736f6c63430008140033";

    private static String librariesLinkedBinary;

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_AUTHORIZEPARTICIPANT = "authorizeParticipant";

    public static final String FUNC_CREATEITEM = "createItem";

    public static final String FUNC_CREATESUPPLYCHAIN = "createSupplyChain";

    public static final String FUNC_DEACTIVATEITEM = "deactivateItem";

    public static final String FUNC_GETITEMCHILDREN = "getItemChildren";

    public static final String FUNC_GETITEMDETAILS = "getItemDetails";

    public static final String FUNC_GETITEMPARENTS = "getItemParents";

    public static final String FUNC_GETTRANSACTIONDETAILS = "getTransactionDetails";

    public static final String FUNC_ISPARTICIPANTAUTHORIZED = "isParticipantAuthorized";

    public static final String FUNC_ITEMCHILDREN = "itemChildren";

    public static final String FUNC_ITEMS = "items";

    public static final String FUNC_PROCESSITEM = "processItem";

    public static final String FUNC_SUPPLYCHAINS = "supplyChains";

    public static final String FUNC_TRANSACTIONS = "transactions";

    public static final String FUNC_TRANSFERADMIN = "transferAdmin";

    public static final String FUNC_TRANSFERITEM = "transferItem";

    public static final String FUNC_UPDATEITEMSTATUS = "updateItemStatus";

    public static final Event ADMINTRANSFERRED_EVENT = new Event("AdminTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ITEMCREATED_EVENT = new Event("ItemCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMPROCESSED_EVENT = new Event("ItemProcessed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMSTATUSUPDATED_EVENT = new Event("ItemStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event ITEMTRANSFERRED_EVENT = new Event("ItemTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PARTICIPANTAUTHORIZED_EVENT = new Event("ParticipantAuthorized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPPLYCHAINCREATED_EVENT = new Event("SupplyChainCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected SmartContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
                            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartContract(String contractAddress, Web3j web3j, Credentials credentials,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AdminTransferredEventResponse> getAdminTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADMINTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<AdminTransferredEventResponse> responses = new ArrayList<AdminTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AdminTransferredEventResponse typedResponse = new AdminTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousAdmin = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AdminTransferredEventResponse getAdminTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADMINTRANSFERRED_EVENT, log);
        AdminTransferredEventResponse typedResponse = new AdminTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.previousAdmin = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.newAdmin = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<AdminTransferredEventResponse> adminTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAdminTransferredEventFromLog(log));
    }

    public Flowable<AdminTransferredEventResponse> adminTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADMINTRANSFERRED_EVENT));
        return adminTransferredEventFlowable(filter);
    }

    public static List<ItemCreatedEventResponse> getItemCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMCREATED_EVENT, transactionReceipt);
        ArrayList<ItemCreatedEventResponse> responses = new ArrayList<ItemCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemCreatedEventResponse typedResponse = new ItemCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.itemType = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.supplyChainId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemCreatedEventResponse getItemCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMCREATED_EVENT, log);
        ItemCreatedEventResponse typedResponse = new ItemCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.itemType = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.supplyChainId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemCreatedEventResponse> itemCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemCreatedEventFromLog(log));
    }

    public Flowable<ItemCreatedEventResponse> itemCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMCREATED_EVENT));
        return itemCreatedEventFlowable(filter);
    }

    public static List<ItemProcessedEventResponse> getItemProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMPROCESSED_EVENT, transactionReceipt);
        ArrayList<ItemProcessedEventResponse> responses = new ArrayList<ItemProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemProcessedEventResponse typedResponse = new ItemProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newItemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sourceItemIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.processorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemProcessedEventResponse getItemProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMPROCESSED_EVENT, log);
        ItemProcessedEventResponse typedResponse = new ItemProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.newItemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sourceItemIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.processorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ItemProcessedEventResponse> itemProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemProcessedEventFromLog(log));
    }

    public Flowable<ItemProcessedEventResponse> itemProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMPROCESSED_EVENT));
        return itemProcessedEventFlowable(filter);
    }

    public static List<ItemStatusUpdatedEventResponse> getItemStatusUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<ItemStatusUpdatedEventResponse> responses = new ArrayList<ItemStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemStatusUpdatedEventResponse typedResponse = new ItemStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemStatusUpdatedEventResponse getItemStatusUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMSTATUSUPDATED_EVENT, log);
        ItemStatusUpdatedEventResponse typedResponse = new ItemStatusUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ItemStatusUpdatedEventResponse> itemStatusUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemStatusUpdatedEventFromLog(log));
    }

    public Flowable<ItemStatusUpdatedEventResponse> itemStatusUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMSTATUSUPDATED_EVENT));
        return itemStatusUpdatedEventFlowable(filter);
    }

    public static List<ItemTransferredEventResponse> getItemTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<ItemTransferredEventResponse> responses = new ArrayList<ItemTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemTransferredEventResponse typedResponse = new ItemTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fromUserId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toUserId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemTransferredEventResponse getItemTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMTRANSFERRED_EVENT, log);
        ItemTransferredEventResponse typedResponse = new ItemTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.fromUserId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.toUserId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemTransferredEventResponse> itemTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemTransferredEventFromLog(log));
    }

    public Flowable<ItemTransferredEventResponse> itemTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMTRANSFERRED_EVENT));
        return itemTransferredEventFlowable(filter);
    }

    public static List<ParticipantAuthorizedEventResponse> getParticipantAuthorizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PARTICIPANTAUTHORIZED_EVENT, transactionReceipt);
        ArrayList<ParticipantAuthorizedEventResponse> responses = new ArrayList<ParticipantAuthorizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ParticipantAuthorizedEventResponse typedResponse = new ParticipantAuthorizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.participantId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ParticipantAuthorizedEventResponse getParticipantAuthorizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PARTICIPANTAUTHORIZED_EVENT, log);
        ParticipantAuthorizedEventResponse typedResponse = new ParticipantAuthorizedEventResponse();
        typedResponse.log = log;
        typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.participantId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ParticipantAuthorizedEventResponse> participantAuthorizedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getParticipantAuthorizedEventFromLog(log));
    }

    public Flowable<ParticipantAuthorizedEventResponse> participantAuthorizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PARTICIPANTAUTHORIZED_EVENT));
        return participantAuthorizedEventFlowable(filter);
    }

    public static List<SupplyChainCreatedEventResponse> getSupplyChainCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SUPPLYCHAINCREATED_EVENT, transactionReceipt);
        ArrayList<SupplyChainCreatedEventResponse> responses = new ArrayList<SupplyChainCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SupplyChainCreatedEventResponse typedResponse = new SupplyChainCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SupplyChainCreatedEventResponse getSupplyChainCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SUPPLYCHAINCREATED_EVENT, log);
        SupplyChainCreatedEventResponse typedResponse = new SupplyChainCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SupplyChainCreatedEventResponse> supplyChainCreatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSupplyChainCreatedEventFromLog(log));
    }

    public Flowable<SupplyChainCreatedEventResponse> supplyChainCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPPLYCHAINCREATED_EVENT));
        return supplyChainCreatedEventFlowable(filter);
    }

    public RemoteFunctionCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeParticipant(BigInteger supplyChainId,
            BigInteger participantId) {
        final Function function = new Function(
                FUNC_AUTHORIZEPARTICIPANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(participantId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createItem(BigInteger itemId,
            BigInteger supplyChainId, BigInteger quantity, String itemType, BigInteger creatorId) {
        final Function function = new Function(
                FUNC_CREATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.Utf8String(itemType), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSupplyChain(BigInteger supplyChainId,
            BigInteger creatorId) {
        final Function function = new Function(
                FUNC_CREATESUPPLYCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deactivateItem(BigInteger itemId,
            BigInteger requesterId) {
        final Function function = new Function(
                FUNC_DEACTIVATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(requesterId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getItemChildren(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMCHILDREN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>> getItemDetails(
            BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getItemParents(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMPARENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> getTransactionDetails(
            BigInteger transactionId) {
        final Function function = new Function(FUNC_GETTRANSACTIONDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isParticipantAuthorized(BigInteger supplyChainId,
            BigInteger participantId) {
        final Function function = new Function(FUNC_ISPARTICIPANTAUTHORIZED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(participantId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> itemChildren(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_ITEMCHILDREN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>> items(
            BigInteger param0) {
        final Function function = new Function(FUNC_ITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> processItem(List<BigInteger> sourceItemIds,
            BigInteger newItemId, List<BigInteger> inputQuantities, BigInteger outputQuantity,
            String newItemType, BigInteger processorId) {
        final Function function = new Function(
                FUNC_PROCESSITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(sourceItemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(newItemId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(inputQuantities, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(outputQuantity), 
                new org.web3j.abi.datatypes.Utf8String(newItemType), 
                new org.web3j.abi.datatypes.generated.Uint256(processorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> supplyChains(
            BigInteger param0) {
        final Function function = new Function(FUNC_SUPPLYCHAINS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> transactions(
            BigInteger param0) {
        final Function function = new Function(FUNC_TRANSACTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> transferAdmin(String newAdmin) {
        final Function function = new Function(
                FUNC_TRANSFERADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newAdmin)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferItem(BigInteger itemId,
            BigInteger toUserId, BigInteger quantity, String actionType, BigInteger fromUserId) {
        final Function function = new Function(
                FUNC_TRANSFERITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(toUserId), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.Utf8String(actionType), 
                new org.web3j.abi.datatypes.generated.Uint256(fromUserId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateItemStatus(BigInteger itemId,
            BigInteger newStatus, BigInteger ownerId) {
        final Function function = new Function(
                FUNC_UPDATEITEMSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint8(newStatus), 
                new org.web3j.abi.datatypes.generated.Uint256(ownerId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SmartContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                     BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartContract load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                     ContractGasProvider contractGasProvider) {
        return new SmartContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartContract load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartContract> deploy(Web3j web3j, Credentials credentials,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<SmartContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SmartContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
                                                   BigInteger gasLimit) {
        return deployRemoteCall(SmartContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SmartContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class AdminTransferredEventResponse extends BaseEventResponse {
        public String previousAdmin;

        public String newAdmin;
    }

    public static class ItemCreatedEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger creatorId;

        public BigInteger quantity;

        public String itemType;

        public BigInteger supplyChainId;
    }

    public static class ItemProcessedEventResponse extends BaseEventResponse {
        public BigInteger newItemId;

        public List<BigInteger> sourceItemIds;

        public BigInteger processorId;

        public BigInteger transactionId;
    }

    public static class ItemStatusUpdatedEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger status;
    }

    public static class ItemTransferredEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger fromUserId;

        public BigInteger toUserId;

        public BigInteger quantity;

        public BigInteger transactionId;
    }

    public static class ParticipantAuthorizedEventResponse extends BaseEventResponse {
        public BigInteger supplyChainId;

        public BigInteger participantId;
    }

    public static class SupplyChainCreatedEventResponse extends BaseEventResponse {
        public BigInteger supplyChainId;

        public BigInteger creatorId;
    }
}
