package com.manublock.backend.contracts.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class SmartContract extends Contract {
    public static final String BINARY = "60806040526001600555348015610014575f80fd5b50335f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613cc4806100615f395ff3fe608060405234801561000f575f80fd5b5060043610610109575f3560e01c8063b064645b116100a0578063db8c741a1161006f578063db8c741a14610319578063f748324c14610335578063f851a44014610351578063f9e38f9c1461036f578063fe7842691461038b57610109565b8063b064645b1461027b578063bfb231d214610297578063c68c84f6146102cd578063d45aabb6146102e957610109565b80637b90c158116100dc5780637b90c158146101dc57806382adb115146101f85780639ace38c214610214578063a2cfb4f31461024b57610109565b80630fa683d31461010d5780631f9e22c41461014457806333bff3dd1461017657806373004ca0146101a6575b5f80fd5b61012760048036038101906101229190612470565b6103bb565b60405161013b989796959493929190612573565b60405180910390f35b61015e60048036038101906101599190612470565b6104e2565b60405161016d93929190612610565b60405180910390f35b610190600480360381019061018b9190612470565b610534565b60405161019d91906126fc565b60405180910390f35b6101c060048036038101906101bb9190612470565b61059e565b6040516101d3979695949392919061278f565b60405180910390f35b6101f660048036038101906101f19190612470565b6106b6565b005b610212600480360381019061020d9190612864565b610884565b005b61022e60048036038101906102299190612470565b610c00565b604051610242989796959493929190612573565b60405180910390f35b61026560048036038101906102609190612470565b610d08565b60405161027291906126fc565b60405180910390f35b6102956004803603810190610290919061290b565b610d6f565b005b6102b160048036038101906102ac9190612470565b610f3e565b6040516102c4979695949392919061278f565b60405180910390f35b6102e760048036038101906102e2919061299e565b611039565b005b61030360048036038101906102fe9190612a9f565b611737565b6040516103109190612add565b60405180910390f35b610333600480360381019061032e9190612af6565b61179c565b005b61034f600480360381019061034a9190612a9f565b612001565b005b6103596121a6565b6040516103669190612b7a565b60405180910390f35b61038960048036038101906103849190612470565b6121c9565b005b6103a560048036038101906103a09190612b93565b6123a4565b6040516103b29190612bd1565b60405180910390f35b5f805f805f805f60605f60035f8b81526020019081526020015f209050805f01548160010154826002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460040154856005015486600601548760070180805461044890612c17565b80601f016020809104026020016040519081016040528092919081815260200182805461047490612c17565b80156104bf5780601f10610496576101008083540402835291602001916104bf565b820191905f5260205f20905b8154815290600101906020018083116104a257829003601f168201915b505050505090509850985098509850985098509850985050919395975091939597565b6004602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900460ff16905083565b606060015f8381526020019081526020015f2060030180548060200260200160405190810160405280929190818152602001828054801561059257602002820191905f5260205f20905b81548152602001906001019080831161057e575b50505050509050919050565b5f805f805f60605f8060015f8a81526020019081526020015f209050805f0154816001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682600201548360040154846005015f9054906101000a900460ff1685600601866007015f9054906101000a900460ff1681805461061e90612c17565b80601f016020809104026020016040519081016040528092919081815260200182805461064a90612c17565b80156106955780601f1061066c57610100808354040283529160200191610695565b820191905f5260205f20905b81548152906001019060200180831161067857829003601f168201915b50505050509150975097509750975097509750975050919395979092949650565b5f73ffffffffffffffffffffffffffffffffffffffff1660045f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610757576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074e90612c91565b60405180910390fd5b3360045f8381526020019081526020015f206001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160045f8381526020019081526020015f2060010160146101000a81548160ff021916908315150217905550600160045f8381526020019081526020015f206002015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff16817feea10cf1f1e34de78d507b276652440c459f7eff0cbaeac16f924f0d88e246cb60405160405180910390a350565b8360045f8281526020019081526020015f206002015f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091790612d1f565b60405180910390fd5b5f60015f8881526020019081526020015f205f015414610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c90612d87565b60405180910390fd5b5f84116109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae90612def565b60405180910390fd5b5f8067ffffffffffffffff8111156109d2576109d1612e0d565b5b604051908082528060200260200182016040528015610a005781602001602082028036833780820191505090505b5090506040518061010001604052808881526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018281526020018781526020015f6004811115610a5657610a5561271c565b5b815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081526020016001151581525060015f8981526020019081526020015f205f820151815f01556020820151816001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003019080519060200190610b309291906123cf565b506080820151816004015560a0820151816005015f6101000a81548160ff02191690836004811115610b6557610b6461271c565b5b021790555060c0820151816006019081610b7f9190612fd7565b5060e0820151816007015f6101000a81548160ff0219169083151502179055509050503373ffffffffffffffffffffffffffffffffffffffff16877f013adb247f986a2659ea7a28f268c3d3a44a2b2a8e21488407b5f2e1b5e73cd78787878b604051610bef94939291906130e0565b60405180910390a350505050505050565b6003602052805f5260405f205f91509050805f015490806001015490806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806004015490806005015490806006015490806007018054610c8790612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb390612c17565b8015610cfe5780601f10610cd557610100808354040283529160200191610cfe565b820191905f5260205f20905b815481529060010190602001808311610ce157829003601f168201915b5050505050905088565b606060025f8381526020019081526020015f20805480602002602001604051908101604052809291908181526020018280548015610d6357602002820191905f5260205f20905b815481526020019060010190808311610d4f575b50505050509050919050565b818060015f8381526020019081526020015f205f015414610dc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbc90613168565b60405180910390fd5b60015f8281526020019081526020015f206007015f9054906101000a900460ff16610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c906131d0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660015f8581526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebd90613238565b60405180910390fd5b8160015f8581526020019081526020015f206005015f6101000a81548160ff02191690836004811115610efc57610efb61271c565b5b0217905550827f104e19781f7b95c2c1bac73c7dcf206298d9ecb3d6712118520342a510dc911983604051610f319190613256565b60405180910390a2505050565b6001602052805f5260405f205f91509050805f015490806001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002015490806004015490806005015f9054906101000a900460ff1690806006018054610fa690612c17565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd290612c17565b801561101d5780601f10610ff45761010080835404028352916020019161101d565b820191905f5260205f20905b81548152906001019060200180831161100057829003601f168201915b505050505090806007015f9054906101000a900460ff16905087565b5f888890501161107e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611075906132b9565b60405180910390fd5b8484905088889050146110c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bd90613321565b60405180910390fd5b5f60015f8881526020019081526020015f205f01541461111b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111290613389565b60405180910390fd5b5f831161115d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611154906133f1565b60405180910390fd5b5f8060055f8154809291906111719061343c565b9190505590505f5b8a8a90508110156114ea575f8b8b8381811061119857611197613483565b5b9050602002013590505f8989848181106111b5576111b4613483565b5b9050602002013590508160015f8481526020019081526020015f205f015414611213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120a906134fa565b60405180910390fd5b60015f8381526020019081526020015f206007015f9054906101000a900460ff16611273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126a90613562565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660015f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130b906135f0565b60405180910390fd5b8060015f8481526020019081526020015f2060020154101561136b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113629061367e565b60405180910390fd5b5f830361138e5760015f8381526020019081526020015f206004015494506113e5565b8460015f8481526020019081526020015f2060040154146113e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113db9061370c565b60405180910390fd5b5b8060015f8481526020019081526020015f206002015f828254611408919061372a565b925050819055505f60015f8481526020019081526020015f2060020154036114a057600360015f8481526020019081526020015f206005015f6101000a81548160ff021916908360048111156114615761146061271c565b5b0217905550817f104e19781f7b95c2c1bac73c7dcf206298d9ecb3d6712118520342a510dc911960036040516114979190613256565b60405180910390a25b60025f8381526020019081526020015f208b908060018154018082558091505060019003905f5260205f20015f9091909190915055505080806114e29061343c565b915050611179565b508760015f8a81526020019081526020015f205f01819055503360015f8a81526020019081526020015f206001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460015f8a81526020019081526020015f20600201819055508160015f8a81526020019081526020015f20600401819055505f60015f8a81526020019081526020015f206005015f6101000a81548160ff021916908360048111156115bd576115bc61271c565b5b0217905550838360015f8b81526020019081526020015f2060060191826115e5929190613767565b506001805f8a81526020019081526020015f206007015f6101000a81548160ff0219169083151502179055505f5b8a8a90508110156116825760015f8a81526020019081526020015f206003018b8b8381811061164557611644613483565b5b90506020020135908060018154018082558091505060019003905f5260205f20015f9091909190915055808061167a9061343c565b915050611613565b503373ffffffffffffffffffffffffffffffffffffffff16887fdb0c3555f7cb11351b2ba953b35a84e4cc2b79671a9fd0eae201aaa5ffbd25f48c8c856040516116ce9392919061389c565b60405180910390a33373ffffffffffffffffffffffffffffffffffffffff16887f013adb247f986a2659ea7a28f268c3d3a44a2b2a8e21488407b5f2e1b5e73cd78787878760405161172394939291906130e0565b60405180910390a350505050505050505050565b5f60045f8481526020019081526020015f206002015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b848060015f8381526020019081526020015f205f0154146117f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e990613168565b60405180910390fd5b60015f8281526020019081526020015f206007015f9054906101000a900460ff16611852576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611849906131d0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660015f8881526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ea90613238565b60405180910390fd5b8360015f8881526020019081526020015f2060020154101561194a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194190613916565b60405180910390fd5b5f841161198c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198390612def565b60405180910390fd5b5f60055f81548092919061199f9061343c565b9190505590506040518061010001604052808281526020018881526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200160015f8a81526020019081526020015f2060040154815260200186815260200142815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505081525060035f8381526020019081526020015f205f820151815f0155602082015181600101556040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015560a0820151816005015560c0820151816006015560e0820151816007019081611b449190612fd7565b509050508460015f8981526020019081526020015f20600201541115611f02578460015f8981526020019081526020015f206002015f828254611b87919061372a565b925050819055505f8161271089611b9e9190613934565b611ba89190613975565b90505f60015f8a81526020019081526020015f206003018054905067ffffffffffffffff811115611bdc57611bdb612e0d565b5b604051908082528060200260200182016040528015611c0a5781602001602082028036833780820191505090505b5090505f5b60015f8b81526020019081526020015f2060030180549050811015611c8f5760015f8b81526020019081526020015f206003018181548110611c5457611c53613483565b5b905f5260205f200154828281518110611c7057611c6f613483565b5b6020026020010181815250508080611c879061343c565b915050611c0f565b508160015f8481526020019081526020015f205f01819055508760015f8481526020019081526020015f206001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508660015f8481526020019081526020015f206002018190555060015f8a81526020019081526020015f206004015460015f8481526020019081526020015f20600401819055506001805f8481526020019081526020015f206005015f6101000a81548160ff02191690836004811115611d7657611d7561271c565b5b021790555060015f8a81526020019081526020015f2060060160015f8481526020019081526020015f206006019081611daf91906139cf565b506001805f8481526020019081526020015f206007015f6101000a81548160ff0219169083151502179055505f5b8151811015611e4b5760015f8481526020019081526020015f20600301828281518110611e0d57611e0c613483565b5b6020026020010151908060018154018082558091505060019003905f5260205f20015f90919091909150558080611e439061343c565b915050611ddd565b5060025f8a81526020019081526020015f2082908060018154018082558091505060019003905f5260205f20015f90919091909150558773ffffffffffffffffffffffffffffffffffffffff16827f013adb247f986a2659ea7a28f268c3d3a44a2b2a8e21488407b5f2e1b5e73cd78960015f8e81526020019081526020015f2060060160015f8f81526020019081526020015f2060040154604051611ef393929190613b35565b60405180910390a35050611f90565b8560015f8981526020019081526020015f206001015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001805f8981526020019081526020015f206005015f6101000a81548160ff02191690836004811115611f8a57611f8961271c565b5b02179055505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16887f8edd0c555199aa74c8154e4da09f342301bb3c400853ac4af8064fa61cb7e6ab8885604051611ff0929190613b71565b60405180910390a450505050505050565b60045f8381526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806120b857505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ee90613c08565b60405180910390fd5b600160045f8481526020019081526020015f206002015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff16827ffb494f53d22271be1cf5563fbcd743f61e52896019b76db877170f99d6ce86bc60405160405180910390a35050565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b808060015f8381526020019081526020015f205f01541461221f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221690613168565b60405180910390fd5b60015f8281526020019081526020015f206007015f9054906101000a900460ff1661227f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612276906131d0565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660015f8481526020019081526020015f206001015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16148061233657505f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b612375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236c90613c70565b60405180910390fd5b5f60015f8481526020019081526020015f206007015f6101000a81548160ff0219169083151502179055505050565b6002602052815f5260405f2081815481106123bd575f80fd5b905f5260205f20015f91509150505481565b828054828255905f5260205f20908101928215612409579160200282015b828111156124085782518255916020019190600101906123ed565b5b509050612416919061241a565b5090565b5b80821115612431575f815f90555060010161241b565b5090565b5f80fd5b5f80fd5b5f819050919050565b61244f8161243d565b8114612459575f80fd5b50565b5f8135905061246a81612446565b92915050565b5f6020828403121561248557612484612435565b5b5f6124928482850161245c565b91505092915050565b6124a48161243d565b82525050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6124d3826124aa565b9050919050565b6124e3816124c9565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612520578082015181840152602081019050612505565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612545826124e9565b61254f81856124f3565b935061255f818560208601612503565b6125688161252b565b840191505092915050565b5f610100820190506125875f83018b61249b565b612594602083018a61249b565b6125a160408301896124da565b6125ae60608301886124da565b6125bb608083018761249b565b6125c860a083018661249b565b6125d560c083018561249b565b81810360e08301526125e7818461253b565b90509998505050505050505050565b5f8115159050919050565b61260a816125f6565b82525050565b5f6060820190506126235f83018661249b565b61263060208301856124da565b61263d6040830184612601565b949350505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6126778161243d565b82525050565b5f612688838361266e565b60208301905092915050565b5f602082019050919050565b5f6126aa82612645565b6126b4818561264f565b93506126bf8361265f565b805f5b838110156126ef5781516126d6888261267d565b97506126e183612694565b9250506001810190506126c2565b5085935050505092915050565b5f6020820190508181035f83015261271481846126a0565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6005811061275a5761275961271c565b5b50565b5f81905061276a82612749565b919050565b5f6127798261275d565b9050919050565b6127898161276f565b82525050565b5f60e0820190506127a25f83018a61249b565b6127af60208301896124da565b6127bc604083018861249b565b6127c9606083018761249b565b6127d66080830186612780565b81810360a08301526127e8818561253b565b90506127f760c0830184612601565b98975050505050505050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261282457612823612803565b5b8235905067ffffffffffffffff81111561284157612840612807565b5b60208301915083600182028301111561285d5761285c61280b565b5b9250929050565b5f805f805f6080868803121561287d5761287c612435565b5b5f61288a8882890161245c565b955050602061289b8882890161245c565b94505060406128ac8882890161245c565b935050606086013567ffffffffffffffff8111156128cd576128cc612439565b5b6128d98882890161280f565b92509250509295509295909350565b600581106128f4575f80fd5b50565b5f81359050612905816128e8565b92915050565b5f806040838503121561292157612920612435565b5b5f61292e8582860161245c565b925050602061293f858286016128f7565b9150509250929050565b5f8083601f84011261295e5761295d612803565b5b8235905067ffffffffffffffff81111561297b5761297a612807565b5b6020830191508360208202830111156129975761299661280b565b5b9250929050565b5f805f805f805f8060a0898b0312156129ba576129b9612435565b5b5f89013567ffffffffffffffff8111156129d7576129d6612439565b5b6129e38b828c01612949565b985098505060206129f68b828c0161245c565b965050604089013567ffffffffffffffff811115612a1757612a16612439565b5b612a238b828c01612949565b95509550506060612a368b828c0161245c565b935050608089013567ffffffffffffffff811115612a5757612a56612439565b5b612a638b828c0161280f565b92509250509295985092959890939650565b612a7e816124c9565b8114612a88575f80fd5b50565b5f81359050612a9981612a75565b92915050565b5f8060408385031215612ab557612ab4612435565b5b5f612ac28582860161245c565b9250506020612ad385828601612a8b565b9150509250929050565b5f602082019050612af05f830184612601565b92915050565b5f805f805f60808688031215612b0f57612b0e612435565b5b5f612b1c8882890161245c565b9550506020612b2d88828901612a8b565b9450506040612b3e8882890161245c565b935050606086013567ffffffffffffffff811115612b5f57612b5e612439565b5b612b6b8882890161280f565b92509250509295509295909350565b5f602082019050612b8d5f8301846124da565b92915050565b5f8060408385031215612ba957612ba8612435565b5b5f612bb68582860161245c565b9250506020612bc78582860161245c565b9150509250929050565b5f602082019050612be45f83018461249b565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680612c2e57607f821691505b602082108103612c4157612c40612bea565b5b50919050565b7f537570706c7920636861696e20616c72656164792065786973747300000000005f82015250565b5f612c7b601b836124f3565b9150612c8682612c47565b602082019050919050565b5f6020820190508181035f830152612ca881612c6f565b9050919050565b7f4e6f7420617574686f72697a656420666f72207468697320737570706c7920635f8201527f6861696e00000000000000000000000000000000000000000000000000000000602082015250565b5f612d096024836124f3565b9150612d1482612caf565b604082019050919050565b5f6020820190508181035f830152612d3681612cfd565b9050919050565b7f4974656d20494420616c726561647920657869737473000000000000000000005f82015250565b5f612d716016836124f3565b9150612d7c82612d3d565b602082019050919050565b5f6020820190508181035f830152612d9e81612d65565b9050919050565b7f5175616e74697479206d75737420626520706f736974697665000000000000005f82015250565b5f612dd96019836124f3565b9150612de482612da5565b602082019050919050565b5f6020820190508181035f830152612e0681612dcd565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302612e967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612e5b565b612ea08683612e5b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f612edb612ed6612ed18461243d565b612eb8565b61243d565b9050919050565b5f819050919050565b612ef483612ec1565b612f08612f0082612ee2565b848454612e67565b825550505050565b5f90565b612f1c612f10565b612f27818484612eeb565b505050565b5b81811015612f4a57612f3f5f82612f14565b600181019050612f2d565b5050565b601f821115612f8f57612f6081612e3a565b612f6984612e4c565b81016020851015612f78578190505b612f8c612f8485612e4c565b830182612f2c565b50505b505050565b5f82821c905092915050565b5f612faf5f1984600802612f94565b1980831691505092915050565b5f612fc78383612fa0565b9150826002028217905092915050565b612fe0826124e9565b67ffffffffffffffff811115612ff957612ff8612e0d565b5b6130038254612c17565b61300e828285612f4e565b5f60209050601f83116001811461303f575f841561302d578287015190505b6130378582612fbc565b86555061309e565b601f19841661304d86612e3a565b5f5b828110156130745784890151825560018201915060208501945060208101905061304f565b86831015613091578489015161308d601f891682612fa0565b8355505b6001600288020188555050505b505050505050565b828183375f83830152505050565b5f6130bf83856124f3565b93506130cc8385846130a6565b6130d58361252b565b840190509392505050565b5f6060820190506130f35f83018761249b565b81810360208301526131068185876130b4565b9050613115604083018461249b565b95945050505050565b7f4974656d20646f6573206e6f74206578697374000000000000000000000000005f82015250565b5f6131526013836124f3565b915061315d8261311e565b602082019050919050565b5f6020820190508181035f83015261317f81613146565b9050919050565b7f4974656d206973206e6f742061637469766500000000000000000000000000005f82015250565b5f6131ba6012836124f3565b91506131c582613186565b602082019050919050565b5f6020820190508181035f8301526131e7816131ae565b9050919050565b7f4e6f7420746865206974656d206f776e657200000000000000000000000000005f82015250565b5f6132226012836124f3565b915061322d826131ee565b602082019050919050565b5f6020820190508181035f83015261324f81613216565b9050919050565b5f6020820190506132695f830184612780565b92915050565b7f4d757374206861766520736f75726365206974656d73000000000000000000005f82015250565b5f6132a36016836124f3565b91506132ae8261326f565b602082019050919050565b5f6020820190508181035f8301526132d081613297565b9050919050565b7f496e70757420617272617973206d757374206d617463680000000000000000005f82015250565b5f61330b6017836124f3565b9150613316826132d7565b602082019050919050565b5f6020820190508181035f830152613338816132ff565b9050919050565b7f4e6577206974656d20494420616c7265616479206578697374730000000000005f82015250565b5f613373601a836124f3565b915061337e8261333f565b602082019050919050565b5f6020820190508181035f8301526133a081613367565b9050919050565b7f4f7574707574207175616e74697479206d75737420626520706f7369746976655f82015250565b5f6133db6020836124f3565b91506133e6826133a7565b602082019050919050565b5f6020820190508181035f830152613408816133cf565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6134468261243d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036134785761347761340f565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f536f75726365206974656d20646f6573206e6f742065786973740000000000005f82015250565b5f6134e4601a836124f3565b91506134ef826134b0565b602082019050919050565b5f6020820190508181035f830152613511816134d8565b9050919050565b7f536f75726365206974656d206973206e6f7420616374697665000000000000005f82015250565b5f61354c6019836124f3565b915061355782613518565b602082019050919050565b5f6020820190508181035f83015261357981613540565b9050919050565b7f4e6f7420746865206f776e6572206f6620616c6c20736f75726365206974656d5f8201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b5f6135da6021836124f3565b91506135e582613580565b604082019050919050565b5f6020820190508181035f830152613607816135ce565b9050919050565b7f496e73756666696369656e74207175616e7469747920696e20736f75726365205f8201527f6974656d00000000000000000000000000000000000000000000000000000000602082015250565b5f6136686024836124f3565b91506136738261360e565b604082019050919050565b5f6020820190508181035f8301526136958161365c565b9050919050565b7f416c6c206974656d73206d75737420626520696e2073616d6520737570706c795f8201527f20636861696e0000000000000000000000000000000000000000000000000000602082015250565b5f6136f66026836124f3565b91506137018261369c565b604082019050919050565b5f6020820190508181035f830152613723816136ea565b9050919050565b5f6137348261243d565b915061373f8361243d565b92508282039050818111156137575761375661340f565b5b92915050565b5f82905092915050565b613771838361375d565b67ffffffffffffffff81111561378a57613789612e0d565b5b6137948254612c17565b61379f828285612f4e565b5f601f8311600181146137cc575f84156137ba578287013590505b6137c48582612fbc565b86555061382b565b601f1984166137da86612e3a565b5f5b82811015613801578489013582556001820191506020850194506020810190506137dc565b8683101561381e578489013561381a601f891682612fa0565b8355505b6001600288020188555050505b50505050505050565b5f80fd5b82818337505050565b5f61384c838561264f565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561387f5761387e613834565b5b602083029250613890838584613838565b82840190509392505050565b5f6040820190508181035f8301526138b5818587613841565b90506138c4602083018461249b565b949350505050565b7f496e73756666696369656e74207175616e7469747900000000000000000000005f82015250565b5f6139006015836124f3565b915061390b826138cc565b602082019050919050565b5f6020820190508181035f83015261392d816138f4565b9050919050565b5f61393e8261243d565b91506139498361243d565b92508282026139578161243d565b9150828204841483151761396e5761396d61340f565b5b5092915050565b5f61397f8261243d565b915061398a8361243d565b92508282019050808211156139a2576139a161340f565b5b92915050565b5f815490506139b681612c17565b9050919050565b5f819050815f5260205f209050919050565b8181036139dd575050613ab2565b6139e6826139a8565b67ffffffffffffffff8111156139ff576139fe612e0d565b5b613a098254612c17565b613a14828285612f4e565b5f601f831160018114613a41575f8415613a2f578287015490505b613a398582612fbc565b865550613aab565b601f198416613a4f876139bd565b9650613a5a86612e3a565b5f5b82811015613a8157848901548255600182019150600185019450602081019050613a5c565b86831015613a9e5784890154613a9a601f891682612fa0565b8355505b6001600288020188555050505b5050505050505b565b5f8154613ac081612c17565b613aca81866124f3565b9450600182165f8114613ae45760018114613afa57613b2c565b60ff198316865281151560200286019350613b2c565b613b0385612e3a565b5f5b83811015613b2457815481890152600182019150602081019050613b05565b808801955050505b50505092915050565b5f606082019050613b485f83018661249b565b8181036020830152613b5a8185613ab4565b9050613b69604083018461249b565b949350505050565b5f604082019050613b845f83018561249b565b613b91602083018461249b565b9392505050565b7f4f6e6c792063726561746f72206f722061646d696e2063616e20617574686f725f8201527f697a650000000000000000000000000000000000000000000000000000000000602082015250565b5f613bf26023836124f3565b9150613bfd82613b98565b604082019050919050565b5f6020820190508181035f830152613c1f81613be6565b9050919050565b7f4e6f7420617574686f72697a65640000000000000000000000000000000000005f82015250565b5f613c5a600e836124f3565b9150613c6582613c26565b602082019050919050565b5f6020820190508181035f830152613c8781613c4e565b905091905056fea264697066735822122062bc1261133a8367a944af418c2ee87e301300224c0e282594ea14e9ee20b39d64736f6c63430008140033";

    private static String librariesLinkedBinary;

    public static final String FUNC_AUTHORIZEPARTICIPANT = "authorizeParticipant";

    public static final String FUNC_CREATEITEM = "createItem";

    public static final String FUNC_CREATESUPPLYCHAIN = "createSupplyChain";

    public static final String FUNC_DEACTIVATEITEM = "deactivateItem";

    public static final String FUNC_PROCESSITEM = "processItem";

    public static final String FUNC_TRANSFERITEM = "transferItem";

    public static final String FUNC_UPDATEITEMSTATUS = "updateItemStatus";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_GETITEMCHILDREN = "getItemChildren";

    public static final String FUNC_GETITEMDETAILS = "getItemDetails";

    public static final String FUNC_GETITEMPARENTS = "getItemParents";

    public static final String FUNC_GETTRANSACTIONDETAILS = "getTransactionDetails";

    public static final String FUNC_ISPARTICIPANTAUTHORIZED = "isParticipantAuthorized";

    public static final String FUNC_ITEMCHILDREN = "itemChildren";

    public static final String FUNC_ITEMS = "items";

    public static final String FUNC_SUPPLYCHAINS = "supplyChains";

    public static final String FUNC_TRANSACTIONS = "transactions";

    public static final Event ITEMCREATED_EVENT = new Event("ItemCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMPROCESSED_EVENT = new Event("ItemProcessed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMSTATUSUPDATED_EVENT = new Event("ItemStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event ITEMTRANSFERRED_EVENT = new Event("ItemTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PARTICIPANTAUTHORIZED_EVENT = new Event("ParticipantAuthorized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SUPPLYCHAINCREATED_EVENT = new Event("SupplyChainCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected SmartContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
                            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartContract(String contractAddress, Web3j web3j, Credentials credentials,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeParticipant(BigInteger supplyChainId,
            String participant) {
        final Function function = new Function(
                FUNC_AUTHORIZEPARTICIPANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.Address(160, participant)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createItem(BigInteger itemId,
            BigInteger supplyChainId, BigInteger quantity, String itemType) {
        final Function function = new Function(
                FUNC_CREATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.Utf8String(itemType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSupplyChain(BigInteger supplyChainId) {
        final Function function = new Function(
                FUNC_CREATESUPPLYCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deactivateItem(BigInteger itemId) {
        final Function function = new Function(
                FUNC_DEACTIVATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ItemCreatedEventResponse> getItemCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMCREATED_EVENT, transactionReceipt);
        ArrayList<ItemCreatedEventResponse> responses = new ArrayList<ItemCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemCreatedEventResponse typedResponse = new ItemCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.itemType = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.supplyChainId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemCreatedEventResponse getItemCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMCREATED_EVENT, log);
        ItemCreatedEventResponse typedResponse = new ItemCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.itemType = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.supplyChainId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ItemCreatedEventResponse> itemCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemCreatedEventFromLog(log));
    }

    public Flowable<ItemCreatedEventResponse> itemCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMCREATED_EVENT));
        return itemCreatedEventFlowable(filter);
    }

    public static List<ItemProcessedEventResponse> getItemProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMPROCESSED_EVENT, transactionReceipt);
        ArrayList<ItemProcessedEventResponse> responses = new ArrayList<ItemProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemProcessedEventResponse typedResponse = new ItemProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newItemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.processor = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sourceItemIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemProcessedEventResponse getItemProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMPROCESSED_EVENT, log);
        ItemProcessedEventResponse typedResponse = new ItemProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.newItemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.processor = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.sourceItemIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ItemProcessedEventResponse> itemProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemProcessedEventFromLog(log));
    }

    public Flowable<ItemProcessedEventResponse> itemProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMPROCESSED_EVENT));
        return itemProcessedEventFlowable(filter);
    }

    public static List<ItemStatusUpdatedEventResponse> getItemStatusUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<ItemStatusUpdatedEventResponse> responses = new ArrayList<ItemStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemStatusUpdatedEventResponse typedResponse = new ItemStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemStatusUpdatedEventResponse getItemStatusUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMSTATUSUPDATED_EVENT, log);
        ItemStatusUpdatedEventResponse typedResponse = new ItemStatusUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ItemStatusUpdatedEventResponse> itemStatusUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemStatusUpdatedEventFromLog(log));
    }

    public Flowable<ItemStatusUpdatedEventResponse> itemStatusUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMSTATUSUPDATED_EVENT));
        return itemStatusUpdatedEventFlowable(filter);
    }

    public static List<ItemTransferredEventResponse> getItemTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<ItemTransferredEventResponse> responses = new ArrayList<ItemTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemTransferredEventResponse typedResponse = new ItemTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemTransferredEventResponse getItemTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMTRANSFERRED_EVENT, log);
        ItemTransferredEventResponse typedResponse = new ItemTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ItemTransferredEventResponse> itemTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemTransferredEventFromLog(log));
    }

    public Flowable<ItemTransferredEventResponse> itemTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMTRANSFERRED_EVENT));
        return itemTransferredEventFlowable(filter);
    }

    public static List<ParticipantAuthorizedEventResponse> getParticipantAuthorizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PARTICIPANTAUTHORIZED_EVENT, transactionReceipt);
        ArrayList<ParticipantAuthorizedEventResponse> responses = new ArrayList<ParticipantAuthorizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ParticipantAuthorizedEventResponse typedResponse = new ParticipantAuthorizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.participant = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ParticipantAuthorizedEventResponse getParticipantAuthorizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PARTICIPANTAUTHORIZED_EVENT, log);
        ParticipantAuthorizedEventResponse typedResponse = new ParticipantAuthorizedEventResponse();
        typedResponse.log = log;
        typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.participant = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ParticipantAuthorizedEventResponse> participantAuthorizedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getParticipantAuthorizedEventFromLog(log));
    }

    public Flowable<ParticipantAuthorizedEventResponse> participantAuthorizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PARTICIPANTAUTHORIZED_EVENT));
        return participantAuthorizedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> processItem(List<BigInteger> sourceItemIds,
            BigInteger newItemId, List<BigInteger> inputQuantities, BigInteger outputQuantity,
            String newItemType) {
        final Function function = new Function(
                FUNC_PROCESSITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(sourceItemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(newItemId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(inputQuantities, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(outputQuantity), 
                new org.web3j.abi.datatypes.Utf8String(newItemType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<SupplyChainCreatedEventResponse> getSupplyChainCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SUPPLYCHAINCREATED_EVENT, transactionReceipt);
        ArrayList<SupplyChainCreatedEventResponse> responses = new ArrayList<SupplyChainCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SupplyChainCreatedEventResponse typedResponse = new SupplyChainCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SupplyChainCreatedEventResponse getSupplyChainCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SUPPLYCHAINCREATED_EVENT, log);
        SupplyChainCreatedEventResponse typedResponse = new SupplyChainCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creator = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<SupplyChainCreatedEventResponse> supplyChainCreatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSupplyChainCreatedEventFromLog(log));
    }

    public Flowable<SupplyChainCreatedEventResponse> supplyChainCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPPLYCHAINCREATED_EVENT));
        return supplyChainCreatedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> transferItem(BigInteger itemId, String to,
            BigInteger quantity, String actionType) {
        final Function function = new Function(
                FUNC_TRANSFERITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.Utf8String(actionType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateItemStatus(BigInteger itemId,
            BigInteger newStatus) {
        final Function function = new Function(
                FUNC_UPDATEITEMSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint8(newStatus)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getItemChildren(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMCHILDREN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>> getItemDetails(
            BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getItemParents(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMPARENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>> getTransactionDetails(
            BigInteger transactionId) {
        final Function function = new Function(FUNC_GETTRANSACTIONDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isParticipantAuthorized(BigInteger supplyChainId,
            String participant) {
        final Function function = new Function(FUNC_ISPARTICIPANTAUTHORIZED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.Address(160, participant)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> itemChildren(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_ITEMCHILDREN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>> items(
            BigInteger param0) {
        final Function function = new Function(FUNC_ITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, BigInteger, BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, String, Boolean>> supplyChains(BigInteger param0) {
        final Function function = new Function(FUNC_SUPPLYCHAINS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, String, Boolean>>(function,
                new Callable<Tuple3<BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>> transactions(
            BigInteger param0) {
        final Function function = new Function(FUNC_TRANSACTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static SmartContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                     BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartContract load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                     ContractGasProvider contractGasProvider) {
        return new SmartContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartContract load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartContract> deploy(Web3j web3j, Credentials credentials,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<SmartContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SmartContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
                                                   BigInteger gasLimit) {
        return deployRemoteCall(SmartContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SmartContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ItemCreatedEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public String creator;

        public BigInteger quantity;

        public String itemType;

        public BigInteger supplyChainId;
    }

    public static class ItemProcessedEventResponse extends BaseEventResponse {
        public BigInteger newItemId;

        public String processor;

        public List<BigInteger> sourceItemIds;

        public BigInteger transactionId;
    }

    public static class ItemStatusUpdatedEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger status;
    }

    public static class ItemTransferredEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public String from;

        public String to;

        public BigInteger quantity;

        public BigInteger transactionId;
    }

    public static class ParticipantAuthorizedEventResponse extends BaseEventResponse {
        public BigInteger supplyChainId;

        public String participant;
    }

    public static class SupplyChainCreatedEventResponse extends BaseEventResponse {
        public BigInteger supplyChainId;

        public String creator;
    }
}
