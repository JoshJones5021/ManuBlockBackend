package com.manublock.backend.contracts.contract;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.2.
 */
@SuppressWarnings("rawtypes")
public class SmartContract extends Contract {
    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_AUTHORIZEPARTICIPANT = "authorizeParticipant";

    public static final String FUNC_CREATEITEM = "createItem";

    public static final String FUNC_CREATESUPPLYCHAIN = "createSupplyChain";

    public static final String FUNC_DEACTIVATEITEM = "deactivateItem";

    public static final String FUNC_PROCESSITEM = "processItem";

    public static final String FUNC_TRANSFERITEM = "transferItem";

    public static final String FUNC_UPDATEITEMSTATUS = "updateItemStatus";

    public static final String FUNC_ADMIN = "admin";

    public static final String FUNC_GETITEMCHILDREN = "getItemChildren";

    public static final String FUNC_GETITEMDETAILS = "getItemDetails";

    public static final String FUNC_GETITEMPARENTS = "getItemParents";

    public static final String FUNC_GETTRANSACTIONDETAILS = "getTransactionDetails";

    public static final String FUNC_ISPARTICIPANTAUTHORIZED = "isParticipantAuthorized";

    public static final String FUNC_ITEMCHILDREN = "itemChildren";

    public static final String FUNC_ITEMS = "items";

    public static final String FUNC_SUPPLYCHAINS = "supplyChains";

    public static final String FUNC_TRANSACTIONS = "transactions";

    public static final Event ITEMCREATED_EVENT = new Event("ItemCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMPROCESSED_EVENT = new Event("ItemProcessed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ITEMSTATUSUPDATED_EVENT = new Event("ItemStatusUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event ITEMTRANSFERRED_EVENT = new Event("ItemTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event PARTICIPANTAUTHORIZED_EVENT = new Event("ParticipantAuthorized", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SUPPLYCHAINCREATED_EVENT = new Event("SupplyChainCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected SmartContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice,
                            BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SmartContract(String contractAddress, Web3j web3j, Credentials credentials,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SmartContract(String contractAddress, Web3j web3j, TransactionManager transactionManager,
                            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeParticipant(BigInteger supplyChainId,
            BigInteger participantId) {
        final Function function = new Function(
                FUNC_AUTHORIZEPARTICIPANT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(participantId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createItem(BigInteger itemId,
            BigInteger supplyChainId, BigInteger quantity, String itemType, BigInteger creatorId) {
        final Function function = new Function(
                FUNC_CREATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.Utf8String(itemType), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createSupplyChain(BigInteger supplyChainId,
            BigInteger creatorId) {
        final Function function = new Function(
                FUNC_CREATESUPPLYCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(creatorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> deactivateItem(BigInteger itemId,
            BigInteger requesterId) {
        final Function function = new Function(
                FUNC_DEACTIVATEITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(requesterId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<ItemCreatedEventResponse> getItemCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMCREATED_EVENT, transactionReceipt);
        ArrayList<ItemCreatedEventResponse> responses = new ArrayList<ItemCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemCreatedEventResponse typedResponse = new ItemCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.itemType = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.supplyChainId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemCreatedEventResponse getItemCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMCREATED_EVENT, log);
        ItemCreatedEventResponse typedResponse = new ItemCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.itemType = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.supplyChainId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemCreatedEventResponse> itemCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemCreatedEventFromLog(log));
    }

    public Flowable<ItemCreatedEventResponse> itemCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMCREATED_EVENT));
        return itemCreatedEventFlowable(filter);
    }

    public static List<ItemProcessedEventResponse> getItemProcessedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMPROCESSED_EVENT, transactionReceipt);
        ArrayList<ItemProcessedEventResponse> responses = new ArrayList<ItemProcessedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemProcessedEventResponse typedResponse = new ItemProcessedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.newItemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sourceItemIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.processorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemProcessedEventResponse getItemProcessedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMPROCESSED_EVENT, log);
        ItemProcessedEventResponse typedResponse = new ItemProcessedEventResponse();
        typedResponse.log = log;
        typedResponse.newItemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.sourceItemIds = (List<BigInteger>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.processorId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ItemProcessedEventResponse> itemProcessedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemProcessedEventFromLog(log));
    }

    public Flowable<ItemProcessedEventResponse> itemProcessedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMPROCESSED_EVENT));
        return itemProcessedEventFlowable(filter);
    }

    public static List<ItemStatusUpdatedEventResponse> getItemStatusUpdatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMSTATUSUPDATED_EVENT, transactionReceipt);
        ArrayList<ItemStatusUpdatedEventResponse> responses = new ArrayList<ItemStatusUpdatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemStatusUpdatedEventResponse typedResponse = new ItemStatusUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemStatusUpdatedEventResponse getItemStatusUpdatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMSTATUSUPDATED_EVENT, log);
        ItemStatusUpdatedEventResponse typedResponse = new ItemStatusUpdatedEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.status = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ItemStatusUpdatedEventResponse> itemStatusUpdatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemStatusUpdatedEventFromLog(log));
    }

    public Flowable<ItemStatusUpdatedEventResponse> itemStatusUpdatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMSTATUSUPDATED_EVENT));
        return itemStatusUpdatedEventFlowable(filter);
    }

    public static List<ItemTransferredEventResponse> getItemTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ITEMTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<ItemTransferredEventResponse> responses = new ArrayList<ItemTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ItemTransferredEventResponse typedResponse = new ItemTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.fromUserId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.toUserId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ItemTransferredEventResponse getItemTransferredEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ITEMTRANSFERRED_EVENT, log);
        ItemTransferredEventResponse typedResponse = new ItemTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.itemId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.fromUserId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.toUserId = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.quantity = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.transactionId = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<ItemTransferredEventResponse> itemTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getItemTransferredEventFromLog(log));
    }

    public Flowable<ItemTransferredEventResponse> itemTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ITEMTRANSFERRED_EVENT));
        return itemTransferredEventFlowable(filter);
    }

    public static List<ParticipantAuthorizedEventResponse> getParticipantAuthorizedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(PARTICIPANTAUTHORIZED_EVENT, transactionReceipt);
        ArrayList<ParticipantAuthorizedEventResponse> responses = new ArrayList<ParticipantAuthorizedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ParticipantAuthorizedEventResponse typedResponse = new ParticipantAuthorizedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.participantId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ParticipantAuthorizedEventResponse getParticipantAuthorizedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(PARTICIPANTAUTHORIZED_EVENT, log);
        ParticipantAuthorizedEventResponse typedResponse = new ParticipantAuthorizedEventResponse();
        typedResponse.log = log;
        typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.participantId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ParticipantAuthorizedEventResponse> participantAuthorizedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getParticipantAuthorizedEventFromLog(log));
    }

    public Flowable<ParticipantAuthorizedEventResponse> participantAuthorizedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PARTICIPANTAUTHORIZED_EVENT));
        return participantAuthorizedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> processItem(List<BigInteger> sourceItemIds,
            BigInteger newItemId, List<BigInteger> inputQuantities, BigInteger outputQuantity,
            String newItemType, BigInteger processorId) {
        final Function function = new Function(
                FUNC_PROCESSITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(sourceItemIds, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(newItemId), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(inputQuantities, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(outputQuantity), 
                new org.web3j.abi.datatypes.Utf8String(newItemType), 
                new org.web3j.abi.datatypes.generated.Uint256(processorId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static List<SupplyChainCreatedEventResponse> getSupplyChainCreatedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SUPPLYCHAINCREATED_EVENT, transactionReceipt);
        ArrayList<SupplyChainCreatedEventResponse> responses = new ArrayList<SupplyChainCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SupplyChainCreatedEventResponse typedResponse = new SupplyChainCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SupplyChainCreatedEventResponse getSupplyChainCreatedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SUPPLYCHAINCREATED_EVENT, log);
        SupplyChainCreatedEventResponse typedResponse = new SupplyChainCreatedEventResponse();
        typedResponse.log = log;
        typedResponse.supplyChainId = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.creatorId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SupplyChainCreatedEventResponse> supplyChainCreatedEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSupplyChainCreatedEventFromLog(log));
    }

    public Flowable<SupplyChainCreatedEventResponse> supplyChainCreatedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SUPPLYCHAINCREATED_EVENT));
        return supplyChainCreatedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> transferItem(BigInteger itemId,
            BigInteger toUserId, BigInteger quantity, String actionType, BigInteger fromUserId) {
        final Function function = new Function(
                FUNC_TRANSFERITEM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint256(toUserId), 
                new org.web3j.abi.datatypes.generated.Uint256(quantity), 
                new org.web3j.abi.datatypes.Utf8String(actionType), 
                new org.web3j.abi.datatypes.generated.Uint256(fromUserId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateItemStatus(BigInteger itemId,
            BigInteger newStatus, BigInteger ownerId) {
        final Function function = new Function(
                FUNC_UPDATEITEMSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId), 
                new org.web3j.abi.datatypes.generated.Uint8(newStatus), 
                new org.web3j.abi.datatypes.generated.Uint256(ownerId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> admin() {
        final Function function = new Function(FUNC_ADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getItemChildren(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMCHILDREN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>> getItemDetails(
            BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getItemParents(BigInteger itemId) {
        final Function function = new Function(FUNC_GETITEMPARENTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(itemId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> getTransactionDetails(
            BigInteger transactionId) {
        final Function function = new Function(FUNC_GETTRANSACTIONDETAILS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(transactionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isParticipantAuthorized(BigInteger supplyChainId,
            BigInteger participantId) {
        final Function function = new Function(FUNC_ISPARTICIPANTAUTHORIZED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(supplyChainId), 
                new org.web3j.abi.datatypes.generated.Uint256(participantId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> itemChildren(BigInteger param0, BigInteger param1) {
        final Function function = new Function(FUNC_ITEMCHILDREN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>> items(
            BigInteger param0) {
        final Function function = new Function(FUNC_ITEMS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (String) results.get(5).getValue(), 
                                (Boolean) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>> supplyChains(
            BigInteger param0) {
        final Function function = new Function(FUNC_SUPPLYCHAINS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, Boolean>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, Boolean>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, Boolean>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> transactions(
            BigInteger param0) {
        final Function function = new Function(FUNC_TRANSACTIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(function,
                new Callable<Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call(
                            ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static SmartContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                     BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SmartContract load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SmartContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SmartContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                     ContractGasProvider contractGasProvider) {
        return new SmartContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SmartContract load(String contractAddress, Web3j web3j,
                                     TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SmartContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SmartContract> deploy(Web3j web3j, Credentials credentials,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<SmartContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SmartContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SmartContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice,
                                                   BigInteger gasLimit) {
        return deployRemoteCall(SmartContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SmartContract> deploy(Web3j web3j, TransactionManager transactionManager,
                                                   BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SmartContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class ItemCreatedEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger creatorId;

        public BigInteger quantity;

        public String itemType;

        public BigInteger supplyChainId;
    }

    public static class ItemProcessedEventResponse extends BaseEventResponse {
        public BigInteger newItemId;

        public List<BigInteger> sourceItemIds;

        public BigInteger processorId;

        public BigInteger transactionId;
    }

    public static class ItemStatusUpdatedEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger status;
    }

    public static class ItemTransferredEventResponse extends BaseEventResponse {
        public BigInteger itemId;

        public BigInteger fromUserId;

        public BigInteger toUserId;

        public BigInteger quantity;

        public BigInteger transactionId;
    }

    public static class ParticipantAuthorizedEventResponse extends BaseEventResponse {
        public BigInteger supplyChainId;

        public BigInteger participantId;
    }

    public static class SupplyChainCreatedEventResponse extends BaseEventResponse {
        public BigInteger supplyChainId;

        public BigInteger creatorId;
    }
}
